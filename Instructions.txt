####################################################################################################################
# Fault_localyzer --- Analyses Tool for Computing Error Invariants and Fault Localization by Abstract Interpretation
####################################################################################################################

This tool is a research prototype static analyzer designed for analyzing C programs. 


## Author

	Aleksandar Dimovski
	
	
# Installation

The tool requires the following applications and libraries:

* OCaml 

	```
	(sudo) apt-get install ocaml-interp
	```

* Findlib

	```
	(sudo) apt-get install ocaml-findlib
	```

* Menhir: LR(1) parser generator

	```
	(sudo) apt-get install menhir
	```
  
* Opam: https://opam.ocaml.org/doc/Install.html

	```
	(sudo) apt-get install opam
	```
  
* OUnit

	```
	opam install ounit
	```

* APRON: numerical abstract domain library

	```
	opam install apron
	```
* BDDAPRON: numerical abstract domain library

	```
	opam install bddapron
	```


* Zarith: arbitrary-precision integer operations

	```
	opam install zarith
	```

* Z3: SMT solver

	```
	(sudo) apt-get install z3
	```

	

# Compiling Fault_localyzer

Once all required libraries are installed, 'ocamlbuild' can be used to build Fault_localyzer with the following command:

```
eval $(opam config env)                 % It will setup environment variables, that are necessary for the toolchain to work properly
ocamlbuild ml_float.o Main.native -use-ocamlfind -use-menhir -pkgs 'bddapron,apron,gmp,oUnit,zarith' -I utils -I banal -I domains -I frontend -I main -libs boxMPQ,octD,polkaMPQ,str,zarith,bddapron -lflags banal/ml_float.o
```

# Usage

The analyzer performs a sequence of backward/forward analyses of C programs.

The following general command-line options are recognized
(showing their default value):

	 -single 			     set to perform a single-backward analysis (Single_AI)
	 -full 			     set to perform a full sequence of backward/forward analyses (Full_AI)	 
	 -main main                         set the analyzer entry point (defaults to main)
	 -domain boxes|octagons|polyhedra   set the abstract domain (preffered choice is: polyhedra)
	 -joinbwd 2                         set the widening delay in backward analysis	 
	 -joinfwd 2                         set the widening delay in forward analysis


# Simple Examples

enter the folder that contains the tool, and write

$ ./Main.native -single -domain polyhedra tests/simple0.c
to perform Single_AI using Polyhedra domain of simple0b.c file in the folder tests

$ ./Main.native -full -domain polyhedra tests/simple0.c
to perform Full_AI using Polyhedra domain of simple0b.c file in the folder tests


# Benchmarks

$ ./Main.native -single -domain polyhedra tests/program1.c
$ ./Main.native -full -domain polyhedra tests/program1.c

$ ./Main.native -single -domain polyhedra tests/program2.c
$ ./Main.native -full -domain polyhedra tests/program2.c

$ ./Main.native -single -domain polyhedra tests/program2-a.c
$ ./Main.native -full -domain polyhedra tests/program2-a.c

$ ./Main.native -single -domain polyhedra tests/program3.c
$ ./Main.native -full -domain polyhedra tests/program3.c

$ ./Main.native -single -domain polyhedra tests/easy2-1.c
$ ./Main.native -full -domain polyhedra tests/easy2-1.c

$ ./Main.native -single -domain polyhedra tests/Mysore-1.c
$ ./Main.native -full -domain polyhedra tests/Mysore-1.c

$ ./Main.native -single -domain polyhedra tests/tcas1.c > tcas1-single.out
$ ./Main.native -full -domain polyhedra tests/tcas1.c > tcas1-full.out


